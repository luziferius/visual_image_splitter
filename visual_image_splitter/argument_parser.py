# Copyright (C) 2018 Thomas Hess <thomas.hess@udo.edu>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import typing
import argparse

import visual_image_splitter.meta_data


class Namespace(typing.NamedTuple):
    """Mocks the namespace generated by the ArgumentParser. Used for type checking"""
    images: typing.List[str]
    selections: typing.List[typing.Tuple[str, str, str, str]]
    cutelog_integration: bool
    verbose: bool


def generate_argument_parser() -> argparse.ArgumentParser:
    """Generates and returns an ArgumentParser instance."""
    description = "This program takes pictures and cuts them into pieces. It can be used to split scanned images " \
                  "containing multiple images into the individual parts."
    epilog = "Long arguments can be abbreviated, as long as the abbreviation is unambiguous. Donâ€™t use this feature " \
             "in scripts, because newly added argument switches might break previously valid abbreviations. Arguments can " \
             "be loaded from files using the @-Notation. Use \"@/path/to/file\" to load arguments from the specified " \
             "file. The file must contain one argument per line. It may be useful to load a set of selections from a " \
             "file instead of typing it on the command line, when you can re-use the same set of selections multiple " \
             "times."

    parser = argparse.ArgumentParser(description=description, fromfile_prefix_chars="@", epilog=epilog)
    parser.add_argument(
        "images",
        nargs="*",
        metavar="IMAGE",
        help="One or more image files. The given files will be loaded on program start. Specifying images here is "
             "optional, as additional images can be loaded at runtime later."
    )
    parser.add_argument(
        "-s", "--selection",
        action="append",
        nargs=4,
        dest="selections",
        default=[],
        # metavar=("[-]x1[%]", "[-]y1[%]", "[+|-]x2[%]", "[+|-]y2[%]"),  # TODO: This crashes the argument parser?
        metavar=("x1[%]", "y1[%]", "x2[%]", "y2[%]"),
        help="Specify one or more selection presets that will be applied to each image loaded. "
             "Integer values are interpreted as absolute pixel counts. "
             "If a percent sign is given for any value, the value is interpreted "
             "as a percentage of the actual image widths and heights instead. Percentages support decimal points. "
             "The first two values specify the first selection anchor point. "
             "If negative, the right and bottom border will be used as a reference instead of the default left "
             "and top border. "
             "The second pair specifies the second anchor point. "
             "If a sign (either + or -) is given for a value, it is treated as relative to the first anchor point. "
    )
    parser.add_argument(
        "-v", "--version",
        action="version",
        version=f"visual_image_splitter Version {visual_image_splitter.meta_data.VERSION}"
    )
    parser.add_argument(
        "-V", "--verbose",
        action="store_true",
        help="Increase output verbosity. Also show debug messages on the standard output."
    )
    parser.add_argument(
        "--cutelog-integration",
        action="store_true",
        help="Connect to a running cutelog instance with default settings to display the full program log."
    )
    return parser


def parse_arguments():
    parser = generate_argument_parser()
    return parser.parse_args()
